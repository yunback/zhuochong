[
  "self.tray_icon.setIcon(QIcon(icon_path) if os.path.exists(icon_path)else \\\n            self.tray_icon.setIcon(QApplication.style().standardIcon(QStyle.SP_ComputerIcon))",
  "def closeEvent(self, event):\n    \"\"\"点击关闭按钮时隐藏到托盘\"\"\"\n    if hasattr(self, 'tray_icon') and self.tray_icon.isVisible():\n        self.set_pet_active(False)\n        self.hide()\n        event.ignore()\n    else:\n        self.cleanup_and_quit()\n\ndef showEvent(self, event):\n    \"\"\"窗口显示时确保功能恢复\"\"\"\n    if not self.is_active:\n        QTimer.singleShot(50, lambda: self.set_pet_active(True))  # 延迟50ms避免卡顿\n    super().showEvent(event)\n\ndef cleanup_and_quit(self):\n    \"\"\"彻底退出时的清理\"\"\"\n    self.set_pet_active(False)\n    if hasattr(self, 'tray_icon'):\n        self.tray_icon.hide()\n    QApplication.quit()",
  "def init_system_tray(self):\n    \"\"\"初始化托盘图标及菜单\"\"\"\n    self.tray_icon = QSystemTrayIcon(self)\n    \n    # 设置图标（推荐16x16像素）\n    icon_path = resource_path(os.path.join(\"pikaqiu\", \"tray_icon.png\"))\n    self.tray_icon.setIcon(QIcon(icon_path) if os.path.exists(icon_path) else \\\n        self.tray_icon.setIcon(QApplication.style().standardIcon(QStyle.SP_ComputerIcon))\n    \n    # 创建右键菜单\n    tray_menu = QMenu()\n    \n    # 显示/隐藏切换动作\n    self.toggle_action = QAction(\"隐藏桌宠\", self)  # 初始状态为显示\n    self.toggle_action.triggered.connect(self.toggle_visibility)\n    tray_menu.addAction(self.toggle_action)\n    \n    # 退出动作\n    exit_action = QAction(\"退出\", self)\n    exit_action.triggered.connect(self.cleanup_and_quit)\n    tray_menu.addAction(exit_action)\n    \n    self.tray_icon.setContextMenu(tray_menu)\n    self.tray_icon.show()\n    \n    # 双击图标切换显示\n    self.tray_icon.activated.connect(lambda r: self.toggle_visibility() if r == QSystemTrayIcon.DoubleClick else None)\n\ndef toggle_visibility(self):\n    \"\"\"切换显示/隐藏状态\"\"\"\n    if self.isVisible():\n        self.set_pet_active(False)  # 冻结所有功能\n        self.hide()\n        self.toggle_action.setText(\"显示桌宠\")\n    else:\n        self.show()\n        self.set_pet_active(True)   # 恢复所有功能\n        self.toggle_action.setText(\"隐藏桌宠\")\n        self.raise_()  # 置顶窗口",
  "init_system_tray",
  "def set_pet_active(self, active: bool):\n    \"\"\"统一启用/禁用所有功能（核心方法）\"\"\"\n    self.is_active = active\n    \n    # 1. 控制动画系统\n    if hasattr(self, 'movie') and self.movie:\n        if active:\n            self.movie.start()  # 恢复GIF播放\n            self.animation_timer.start(5000)  # 5秒随机动画\n        else:\n            self.movie.setPaused(True)  # 暂停GIF（保留当前帧）\n            self.animation_timer.stop()\n    \n    # 2. 控制休息提醒\n    if hasattr(self, 'timer_rest'):\n        if active and self.rest_reminder == RestReminderState.ENABLED:\n            self.timer_rest.start(1800000)  # 30分钟\n        else:\n            self.timer_rest.stop()\n    \n    # 3. 控制随机语句\n    if hasattr(self, 'greeting_timer'):\n        if active and self.greeting_timer.isActive():\n            self.greeting_timer.start()\n        else:\n            self.greeting_timer.stop()\n    \n    # 4. 强制隐藏所有弹出内容\n    QToolTip.hideText()\n    if hasattr(self, 'time_display'):\n        self.time_display.set_visible(active)",
  "self.is_active = True",
  "方案A",
  "random_interval",
  "random_interval = random.randint(5000, 15000)",
  "尝试播放动画"
]